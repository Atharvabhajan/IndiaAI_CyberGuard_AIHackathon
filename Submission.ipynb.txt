{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Create a list of stopwords\n",
        "stopwords = [\n",
        "    \"aur\", \"hai\", \"to\", \"se\", \"mein\", \"karta\", \"karte\", \"kar\",\n",
        "    \"na\", \"nahi\", \"jab\", \"ba\", \"bhi\", \"koi\", \"ka\", \"ki\", \"ye\",\n",
        "    \"un\", \"us\", \"apne\", \"apna\", \"ke\", \"hoon\", \"hote\", \"hota\",\n",
        "    \"hoti\", \"hue\", \"yahi\", \"aisa\", \"aise\", \"kuch\", \"jaise\",\n",
        "    \"jaisa\", \"jo\", \"sath\", \"sabhi\", \"baki\", \"agar\", \"magar\",\n",
        "    \"dosti\", \"duniya\", \"hum\", \"hamara\", \"hamari\", \"is\", \"jaise\",\n",
        "    \"ke\", \"ka\", \"koi\", \"hamesha\", \"khud\", \"ab\", \"hota\", \"kafi\",\n",
        "    \"kaafi\", \"ya\", \"yaah\", \"kya\", \"wo\", \"sab\", \"kiya\", \"the\",\n",
        "    \"ho\", \"par\", \"do\", \"takh\", \"va\", \"ham\", \"hamare\", \"in\", \"inhin\"\n",
        "]\n",
        "\n",
        "# Convert the list to a DataFrame\n",
        "stopwords_df = pd.DataFrame(stopwords, columns=[\"stopword\"])\n",
        "\n",
        "# Save the DataFrame as a CSV file\n",
        "csv_file_path = 'hindi_stopwords.csv'\n",
        "stopwords_df.to_csv(csv_file_path, index=False)\n",
        "\n",
        "csv_file_path"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "DAf-s9vGheVq",
        "outputId": "06536110-eb08-4002-8a34-3c6aae8c18b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hindi_stopwords.csv'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TloTb0ucyLNT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "# Download NLTK data files if not already downloaded\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "\n",
        "# Initialize the lemmatizer\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "# Load Hindi stopwords from your CSV file\n",
        "stopwords_list = stopwords_list = [\n",
        "    \"aur\", \"hai\", \"to\", \"se\", \"mein\", \"karta\", \"karte\", \"kar\", \"na\",\n",
        "    \"nahi\", \"jab\", \"ba\", \"bhi\", \"koi\", \"ka\", \"ki\", \"ye\", \"un\", \"us\",\n",
        "    \"apne\", \"apna\", \"ke\", \"hoon\", \"hote\", \"hota\", \"hoti\", \"hue\",\n",
        "    \"yahi\", \"aisa\", \"aise\", \"kuch\", \"jaise\", \"jaisa\", \"jo\", \"sath\",\n",
        "    \"sabhi\", \"baki\", \"agar\", \"magar\", \"bhi\", \"sath\", \"dosti\",\n",
        "    \"duniya\", \"hum\", \"hamara\", \"hamari\", \"is\", \"jaise\", \"ke\",\n",
        "    \"ka\", \"koi\", \"hamesha\", \"khud\", \"ab\", \"hota\", \"kafi\",\n",
        "    \"kaafi\", \"ya\", \"yaah\", \"kya\", \"wo\", \"sab\", \"kiya\", \"the\",\n",
        "    \"ho\", \"par\", \"do\", \"takh\", \"va\", \"ham\", \"hamare\", \"in\",\n",
        "    \"inhin\", \"kaun\", \"kahan\", \"kyun\", \"fir\", \"lekin\", \"kab\",\n",
        "    \"wah\", \"unka\", \"unki\", \"tum\", \"tumhara\", \"tumhari\",\n",
        "    \"main\", \"mere\", \"meri\", \"mujh\", \"tumse\", \"tera\", \"teri\",\n",
        "    \"unke\", \"unko\", \"tumhein\", \"sabse\", \"aap\", \"aapke\", \"aapko\",\n",
        "    \"humko\", \"humein\", \"wahaan\", \"yahan\", \"kuchh\", \"kis\",\n",
        "    \"bada\", \"chota\", \"usne\", \"kisne\", \"jise\", \"jin\", \"inka\",\n",
        "    \"inki\", \"inhe\", \"sang\", \"woh\", \"bhai\", \"be\", \"lo\", \"apni\",\n",
        "    \"bina\", \"jabtak\", \"jabse\", \"kyunki\", \"chuki\", \"chuka\",\n",
        "    \"raha\", \"rahe\", \"chal\", \"chale\", \"de\", \"liye\", \"rakh\",\n",
        "    \"gayi\", \"gaye\", \"reh\", \"leta\", \"leti\", \"lete\", \"jayenge\",\n",
        "    \"dega\", \"denge\", \"dengi\", \"chalti\", \"nikal\", \"padh\", \"rakhi\",\n",
        "    \"mujhe\", \"uska\", \"unka\", \"bahut\", \"har\", \"ho\", \"gaya\",\n",
        "    \"gayi\", \"kitna\", \"kaise\", \"kaun\", \"pehle\", \"baad\", \"ek\", \"bande\", \"me\", \"tere\", \"pe\", \"bhej\", \"tujhe\", \"mene\", \"usko\", \"vo\",\"hai\", \"ke\", \"se\", \"aur\", \"kuch\", \"ka\", \"jo\", \"hogi\", \"woh\",\n",
        "    \"me\", \"aur\", \"to\", \"ne\", \"ka\", \"uske\", \"ki\", \"jo\", \"rahi\",\n",
        "    \"thi\", \"ke\", \"ka\", \"aaya\", \"ki\", \"se\", \"din\", \"me\", \"baad\",\n",
        "    \"bhi\", \"but\", \"uske\", \"ne\", \"ka\", \"kiya\", \"but\", \"har\",\n",
        "    \"nayi\", \"hoti\", \"bhi\", \"se\", \"yeh\", \"sirf\", \"leke\", \"kar\", \"dete\", \"hai\", \"ne\", \"ko\", \"ek\", \"aur\", \"ka\", \"pe\", \"jo\",\n",
        "    \"hogi\", \"uspe\", \"thi\", \"dekhne\", \"lag\", \"rahi\", \"theek\",\n",
        "    \"waha\", \"uske\", \"baad\", \"me\", \"beech\", \"pahuch\", \"jayega\",\n",
        "    \"maine\", \"apni\", \"unke\", \"pe\", \"kiya\", \"praya\",\n",
        "    \"wo\", \"hi\", \"har\", \"nayi\", \"yeh\", \"sirf\", \"se\",\n",
        "    \"leke\", \"dete\", \"hai\", \"ne\", \"ko\", \"ek\", \"aur\", \"ka\", \"pe\",\n",
        "    \"kya\", \"kya\", \"na\", \"jaise\", \"jisme\", \"agar\", \"ya\", \"ho\",\n",
        "    \"usme\", \"uska\", \"hamare\", \"humse\", \"bahar\", \"andar\",\n",
        "    \"isi\", \"unhe\", \"yaar\", \"humko\", \"pata\", \"kaha\", \"dekha\",\n",
        "    \"gaya\", \"diya\", \"rakha\", \"mujhe\", \"kahan\", \"kiya\", \"khud\",\n",
        "    \"jeene\", \"pyaar\", \"samjha\", \"nahi\", \"hota\", \"rahne\",\n",
        "    \"kaha\", \"usne\", \"jisme\", \"rakha\", \"rahe\", \"baat\", \"hoti\",\n",
        "    \"dekhne\", \"karein\", \"shuru\", \"tak\", \"hoon\", \"khud\", \"le\",\n",
        "    \"aata\", \"hamara\", \"bechaara\", \"sabse\", \"koi\", \"yeh\",\n",
        "    \"kaha\", \"tum\", \"haath\", \"sabse\", \"bhi\", \"rahkar\", \"karne\",\n",
        "    \"hote\", \"gayi\", \"jaate\", \"aata\", \"aati\", \"gayi\", \"rahati\",\n",
        "    \"rahte\", \"bhi\", \"hote\", \"raha\", \"rahe\", \"hoti\", \"ho\",\n",
        "    \"de\", \"rahi\", \"raha\", \"aata\", \"ek\", \"me\", \"kahan\", \"sabhi\",\n",
        "    \"hamare\", \"le\", \"saath\", \"raha\", \"mujhe\", \"padhte\",\n",
        "     \"mai\", \"paisa\", \"hu\", \"jisse\", \"wapas\", \"jaye\", \"ku\", \"nahi\",\"kya\", \"tumse\", \"hota\", \"hoti\", \"hote\", \"nahi\", \"bhi\", \"hai\",\n",
        "    \"kar\", \"kya\", \"rahna\", \"rahne\", \"rahte\", \"hi\", \"kuchh\",\n",
        "    \"na\", \"waise\", \"wahi\", \"hota\", \"hota\", \"hoon\", \"ho\",\n",
        "    \"rahe\", \"raha\", \"rahi\", \"te\", \"hote\", \"bhi\", \"koi\",\n",
        "    \"jo\", \"ho\", \"nahi\", \"jise\", \"jisme\", \"yeh\", \"kya\",\n",
        "    \"wo\", \"kaise\", \"karne\", \"karta\", \"karte\", \"kar\",\n",
        "    \"me\", \"rahkar\", \"nahi\", \"gayi\", \"kahan\", \"kya\",\n",
        "    \"aur\", \"thoda\", \"thodi\", \"se\", \"ho\"\n",
        "]\n",
        "\n",
        "\n",
        "# Create a DataFrame\n",
        "hindi_stopwords_df = pd.DataFrame(stopwords_list, columns=['stopword'])\n",
        "hindi_stopwords = set(hindi_stopwords_df['stopword'].tolist())  # Adjust column name as needed\n",
        "\n",
        "# Get English stopwords\n",
        "english_stopwords = set(stopwords.words('english'))\n",
        "\n",
        "def preprocess_text(text):\n",
        "    # Check if the text is a string; if not, return an empty string\n",
        "    if not isinstance(text, str):\n",
        "        return \"\"\n",
        "\n",
        "    # Convert to lowercase\n",
        "    text = text.lower()\n",
        "    # Remove punctuation and numbers (keep Hindi characters)\n",
        "    text = re.sub(r'[^\\w\\s\\u0900-\\u097F]', '', text)  # Keep Hindi Unicode\n",
        "    # Tokenize the text\n",
        "    words = text.split()\n",
        "\n",
        "    # Remove stopwords\n",
        "    words = [word for word in words if word not in english_stopwords and word not in hindi_stopwords]\n",
        "\n",
        "    # Lemmatize English words only\n",
        "    words = [lemmatizer.lemmatize(word) for word in words]\n",
        "\n",
        "    return \" \".join(words)\n",
        "\n",
        "# Load the CSV file\n",
        "data = pd.read_csv(\"train.csv\")\n",
        "\n",
        "# Convert all text columns to lowercase\n",
        "for col in data.select_dtypes(include=['object']):  # Apply to string/object type columns\n",
        "    data[col] = data[col].str.lower()\n",
        "\n",
        "# Apply the preprocessing function to the relevant columns\n",
        "# Replace 'column_name' with the actual column you want to preprocess\n",
        "data['cleaned_text'] = data['crimeaditionalinfo'].apply(preprocess_text)\n",
        "\n",
        "# Display the first few rows of the processed data\n",
        "print(data[['crimeaditionalinfo', 'cleaned_text']].head())\n",
        "\n",
        "# Optional: Save the cleaned data to a new CSV file\n",
        "data.to_csv(\"cleaned_train_final.csv\", index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ALUB3Y6jVlR",
        "outputId": "facbba02-8fec-4f34-9bf3-95b6616d21a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                  crimeaditionalinfo  \\\n",
            "0  i had continue received random calls and abusi...   \n",
            "1  the above fraudster is continuously messaging ...   \n",
            "2  he is acting like a police and demanding for m...   \n",
            "3  in apna job i have applied for job interview f...   \n",
            "4  i received a call from lady stating that she w...   \n",
            "\n",
            "                                        cleaned_text  \n",
            "0  continue received random call abusive message ...  \n",
            "1  fraudster continuously messaging asking pay mo...  \n",
            "2  acting like police demanding money adding sect...  \n",
            "3  job applied job interview telecalling resource...  \n",
            "4  received call lady stating send new phone vivo...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv(\"cleaned_train_final.csv\")\n",
        "print(data.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EQunSFC2UTx7",
        "outputId": "e97bc9f6-8ba7-4361-b0cc-3ccc7d4c8410"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                category                       sub_category  \\\n",
            "0  online and social media related crime  cyber bullying  stalking  sexting   \n",
            "1                 online financial fraud                  fraud callvishing   \n",
            "2               online gambling  betting           online gambling  betting   \n",
            "3  online and social media related crime                   online job fraud   \n",
            "4                 online financial fraud                  fraud callvishing   \n",
            "\n",
            "                                  crimeaditionalinfo  \\\n",
            "0  i had continue received random calls and abusi...   \n",
            "1  the above fraudster is continuously messaging ...   \n",
            "2  he is acting like a police and demanding for m...   \n",
            "3  in apna job i have applied for job interview f...   \n",
            "4  i received a call from lady stating that she w...   \n",
            "\n",
            "                                        cleaned_text  \n",
            "0  continue received random call abusive message ...  \n",
            "1  fraudster continuously messaging asking pay mo...  \n",
            "2  acting like police demanding money adding sect...  \n",
            "3  job applied job interview telecalling resource...  \n",
            "4  received call lady stating send new phone vivo...  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load your DataFrame\n",
        "data = pd.read_csv(\"cleaned_train_final.csv\")\n",
        "\n",
        "# Check for missing values in each column\n",
        "missing_values = data.isnull().sum()\n",
        "print(missing_values)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kq4kJKgYVPZj",
        "outputId": "960aede3-af04-47f4-8472-4293b57fff7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "category                 0\n",
            "sub_category          6591\n",
            "crimeaditionalinfo      21\n",
            "cleaned_text          1259\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming 'df' is your DataFrame\n",
        "# Replace 'df' with the actual name of your DataFrame\n",
        "df = pd.read_csv(\"cleaned_train_final.csv\")\n",
        "# Filter rows where 'crimeaditionalinfo' is not null and 'cleaned_text' is blank or null\n",
        "filtered_rows = df[(df['crimeaditionalinfo'].notnull()) & (df['cleaned_text'].isnull() | (df['cleaned_text'] == ''))]\n",
        "\n",
        "# Print the filtered rows\n",
        "print(filtered_rows)\n",
        "\n",
        "filtered_rows.to_csv(\"testing.csv\", index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jw-kqP3-X_EZ",
        "outputId": "8a3986a8-4014-4304-e20c-635a9f87fcf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                    category  \\\n",
            "23     online and social media related crime   \n",
            "78                    online financial fraud   \n",
            "96                    online financial fraud   \n",
            "150    online and social media related crime   \n",
            "272    online and social media related crime   \n",
            "...                                      ...   \n",
            "93565                  any other cyber crime   \n",
            "93584                 online financial fraud   \n",
            "93614  online and social media related crime   \n",
            "93619                 online financial fraud   \n",
            "93652                 online financial fraud   \n",
            "\n",
            "                               sub_category  \\\n",
            "23                cheating by impersonation   \n",
            "78                        fraud callvishing   \n",
            "96           internet banking related fraud   \n",
            "150          profile hacking identity theft   \n",
            "272       cyber bullying  stalking  sexting   \n",
            "...                                     ...   \n",
            "93565                                 other   \n",
            "93584                    upi related frauds   \n",
            "93614  provocative speech for unlawful acts   \n",
            "93619        internet banking related fraud   \n",
            "93652                    upi related frauds   \n",
            "\n",
            "                                      crimeaditionalinfo cleaned_text  \n",
            "23                                                   ...          NaN  \n",
            "78                                                   ...          NaN  \n",
            "96                                                                NaN  \n",
            "150                                                               NaN  \n",
            "272                                                  ...          NaN  \n",
            "...                                                  ...          ...  \n",
            "93565                                                ...          NaN  \n",
            "93584   \\r\\n\\r\\n  \\r\\n             \\r\\n\\r\\n          ...          NaN  \n",
            "93614                                        \\r\\n    ...          NaN  \n",
            "93619                                                ...          NaN  \n",
            "93652                                                ...          NaN  \n",
            "\n",
            "[1238 rows x 4 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df = pd.read_csv(\"cleaned_train_final.csv\")\n",
        "\n",
        "df = df.dropna(subset=['cleaned_text'])\n",
        "df = df.dropna(subset=['sub_category'])\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 210
        },
        "id": "eA7QLqZt8Eez",
        "outputId": "33f9af9a-ee28-4756-cde5-3c24ab163f4b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "category              0\n",
              "sub_category          0\n",
              "crimeaditionalinfo    0\n",
              "cleaned_text          0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sub_category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crimeaditionalinfo</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cleaned_text</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "LA_rJCil7bnw",
        "outputId": "81bed65e-e3f2-4068-8b95-e8e42083f011"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                    category                    sub_category  \\\n",
              "93681                 online financial fraud  internet banking related fraud   \n",
              "93682                 online financial fraud           ewallet related fraud   \n",
              "93683                 online financial fraud              upi related frauds   \n",
              "93684  online and social media related crime        online matrimonial fraud   \n",
              "93685                 online financial fraud               fraud callvishing   \n",
              "\n",
              "                                      crimeaditionalinfo  \\\n",
              "93681  identity theft   smishing sms fraud  creditdeb...   \n",
              "93682  received call from  number asking about phone ...   \n",
              "93683  cyber stalking   blackmailing   phonesmsvoip c...   \n",
              "93684  call karke bola ki aapka lotary laga ha aru ac...   \n",
              "93685  there is app name koko loan app they send the ...   \n",
              "\n",
              "                                            cleaned_text  \n",
              "93681  identity theft smishing sm fraud creditdebit c...  \n",
              "93682  received call number asking phone pay cash bac...  \n",
              "93683  cyber stalking blackmailing phonesmsvoip call ...  \n",
              "93684  call karke bola aapka lotary laga ha aru ac ma...  \n",
              "93685  app name koko loan app send money account unkn...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-064621a3-4b7b-4d2a-8dfd-e3f48a29be73\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>category</th>\n",
              "      <th>sub_category</th>\n",
              "      <th>crimeaditionalinfo</th>\n",
              "      <th>cleaned_text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>93681</th>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>internet banking related fraud</td>\n",
              "      <td>identity theft   smishing sms fraud  creditdeb...</td>\n",
              "      <td>identity theft smishing sm fraud creditdebit c...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93682</th>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>ewallet related fraud</td>\n",
              "      <td>received call from  number asking about phone ...</td>\n",
              "      <td>received call number asking phone pay cash bac...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93683</th>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>upi related frauds</td>\n",
              "      <td>cyber stalking   blackmailing   phonesmsvoip c...</td>\n",
              "      <td>cyber stalking blackmailing phonesmsvoip call ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93684</th>\n",
              "      <td>online and social media related crime</td>\n",
              "      <td>online matrimonial fraud</td>\n",
              "      <td>call karke bola ki aapka lotary laga ha aru ac...</td>\n",
              "      <td>call karke bola aapka lotary laga ha aru ac ma...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>93685</th>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>fraud callvishing</td>\n",
              "      <td>there is app name koko loan app they send the ...</td>\n",
              "      <td>app name koko loan app send money account unkn...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-064621a3-4b7b-4d2a-8dfd-e3f48a29be73')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-064621a3-4b7b-4d2a-8dfd-e3f48a29be73 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-064621a3-4b7b-4d2a-8dfd-e3f48a29be73');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ce42eafd-ba4a-4a77-a732-e72f5f9e1933\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ce42eafd-ba4a-4a77-a732-e72f5f9e1933')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ce42eafd-ba4a-4a77-a732-e72f5f9e1933 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"online and social media related crime\",\n          \"online financial fraud\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sub_category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"ewallet related fraud\",\n          \"fraud callvishing\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"crimeaditionalinfo\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"received call from  number asking about phone pay cash back offer and requested money from upi and asked to pay the requesed money from phone pay this happed thrice and total ammount deducted is \",\n          \"there is app name koko loan app they send the money into the account unknowingly without my consent or any loan letter or anything and now they are asking for rs  this is a fraud loan application and they are abusing me i am a student please help me out\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cleaned_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"received call number asking phone pay cash back offer requested money upi asked pay requesed money phone pay happed thrice total ammount deducted\",\n          \"app name koko loan app send money account unknowingly without consent loan letter anything asking r fraud loan application abusing student please help\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "# Assuming 'df' is your DataFrame\n",
        "# Replace 'df' with the actual name of your DataFrame\n",
        "\n",
        "# Initialize encoders\n",
        "main_category_encoder = LabelEncoder()\n",
        "sub_category_encoder = LabelEncoder()\n",
        "\n",
        "# Encode main category and subcategory\n",
        "df['main_category_encoded'] = main_category_encoder.fit_transform(df['category'])\n",
        "df['sub_category_encoded'] = sub_category_encoder.fit_transform(df['sub_category'])\n"
      ],
      "metadata": {
        "id": "jCfYMY1w6_H-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.dropna(subset=['cleaned_text'])\n",
        "df = df.dropna(subset=['sub_category'])\n",
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "ggL3YDFQ9ZDC",
        "outputId": "76d8ea6d-c4a8-4447-db72-3f4d8a8680a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "category                 0\n",
              "sub_category             0\n",
              "crimeaditionalinfo       0\n",
              "cleaned_text             0\n",
              "main_category_encoded    0\n",
              "sub_category_encoded     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sub_category</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>crimeaditionalinfo</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cleaned_text</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>main_category_encoded</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sub_category_encoded</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for non-string types in cleaned_text\n",
        "non_string_count = df[~df['cleaned_text'].apply(lambda x: isinstance(x, str))].shape[0]\n",
        "print(f\"Number of non-string entries in cleaned_text: {non_string_count}\")\n",
        "\n",
        "# If there are any, display those entries to investigate\n",
        "if non_string_count > 0:\n",
        "    print(\"Non-string entries in cleaned_text:\")\n",
        "    print(df[~df['cleaned_text'].apply(lambda x: isinstance(x, str))])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uR4jsk0h9q1U",
        "outputId": "e3b88fdc-2cda-471f-8d0b-18f3313eb448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of non-string entries in cleaned_text: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Strip whitespace from entries\n",
        "df['cleaned_text'] = df['cleaned_text'].str.strip()\n",
        "\n",
        "# Verify if there are now any empty strings after stripping\n",
        "empty_count_after_strip = (df['cleaned_text'] == '').sum()\n",
        "print(f\"Number of empty strings in cleaned_text after stripping: {empty_count_after_strip}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yqKRfPYi-Jhi",
        "outputId": "87ecb739-fd12-4534-d936-79990e9874e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of empty strings in cleaned_text after stripping: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "# Initialize TF-IDF Vectorizer\n",
        "vectorizer = TfidfVectorizer(max_features=5000)\n",
        "\n",
        "# Fit and transform the entire dataset\n",
        "X_vec = vectorizer.fit_transform(df['cleaned_text'])\n",
        "\n",
        "# Check the shape of the resulting matrix\n",
        "print(f\"Shape of TF-IDF matrix: {X_vec.shape}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1j0BO71z-Upq",
        "outputId": "04bff82d-d673-4123-c104-ca83ea514b85"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape of TF-IDF matrix: (85890, 5000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove classes with only one sample\n",
        "counts = df['category'].value_counts()\n",
        "low_count_classes = counts[counts <= 1].index\n",
        "df_filtered = df[~df['category'].isin(low_count_classes)]\n"
      ],
      "metadata": {
        "id": "VE2rKhmyQQQ1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Assuming 'df' is your DataFrame and 'category' is the column with categories\n",
        "df = df_filtered['category'].value_counts()\n",
        "df = df_filtered\n",
        "\n",
        "# Display unique categories and their counts\n",
        "print(df.head())\n",
        "\n",
        "df.to_csv(\"unique_categories.csv\", index=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7JxTWP0OP-Xm",
        "outputId": "ec668d23-70fe-4195-dc63-2807a1ade539"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                category                       sub_category  \\\n",
            "0  online and social media related crime  cyber bullying  stalking  sexting   \n",
            "1                 online financial fraud                  fraud callvishing   \n",
            "2               online gambling  betting           online gambling  betting   \n",
            "3  online and social media related crime                   online job fraud   \n",
            "4                 online financial fraud                  fraud callvishing   \n",
            "\n",
            "                                  crimeaditionalinfo  \\\n",
            "0  i had continue received random calls and abusi...   \n",
            "1  the above fraudster is continuously messaging ...   \n",
            "2  he is acting like a police and demanding for m...   \n",
            "3  in apna job i have applied for job interview f...   \n",
            "4  i received a call from lady stating that she w...   \n",
            "\n",
            "                                        cleaned_text  main_category_encoded  \\\n",
            "0  continue received random call abusive message ...                      5   \n",
            "1  fraudster continuously messaging asking pay mo...                      7   \n",
            "2  acting like police demanding money adding sect...                      8   \n",
            "3  job applied job interview telecalling resource...                      5   \n",
            "4  received call lady stating send new phone vivo...                      7   \n",
            "\n",
            "   sub_category_encoded  \n",
            "0                     4  \n",
            "1                    15  \n",
            "2                    21  \n",
            "3                    22  \n",
            "4                    15  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Assuming df is your original DataFrame and 'cleaned_text' is the feature,\n",
        "# and 'category' is the label.\n",
        "\n",
        "# Define your features and target\n",
        "X = df['cleaned_text']\n",
        "y = df['category']  # Replace with actual category column\n",
        "\n",
        "# Split the data while keeping the indices\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n",
        "\n",
        "# After splitting, we will also need to transform the text data\n",
        "vectorizer = TfidfVectorizer(max_features=8000)\n",
        "X_train_vec = vectorizer.fit_transform(X_train)\n",
        "X_test_vec = vectorizer.transform(X_test)\n"
      ],
      "metadata": {
        "id": "hsaeILXzPNuy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "# Load your DataFrame (assuming df contains 'cleaned_text' and 'category' columns)\n",
        "# df = pd.read_csv('your_data.csv')  # Uncomment if you need to load data\n",
        "\n",
        "# Prepare features and target\n",
        "X = df['cleaned_text']\n",
        "y = df['category']\n",
        "\n",
        "# Split the data into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Vectorization using TF-IDF\n",
        "vectorizer = TfidfVectorizer(max_features=5000)\n",
        "X_train_vectorized = vectorizer.fit_transform(X_train)\n",
        "X_test_vectorized = vectorizer.transform(X_test)\n",
        "\n",
        "# Train a Random Forest Classifier\n",
        "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf_model.fit(X_train_vectorized, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = rf_model.predict(X_test_vectorized)\n",
        "\n",
        "# Print classification report\n",
        "print(\"Main Category Classification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# Print accuracy score\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "\n",
        "# Create a DataFrame for the results\n",
        "results_df = pd.DataFrame({\n",
        "    'cleaned_text': X_test,  # Use original text from X_test\n",
        "    'predicted_category': y_pred,\n",
        "    'actual_category': y_test\n",
        "})\n",
        "\n",
        "# Display the first few results\n",
        "print(results_df.head())\n",
        "\n",
        "# Save the results to a CSV file\n",
        "results_df.to_csv('main_category_classification_results.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y3AH-gXVZ6_p",
        "outputId": "ae6fdbd1-cfcd-441f-ea59-f7b8d92fcc2b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Main Category Classification Report:\n",
            "                                                 precision    recall  f1-score   support\n",
            "\n",
            "                         any other cyber crime       0.68      0.08      0.15      2142\n",
            "                          cryptocurrency crime       0.86      0.06      0.12        93\n",
            "                cyber attack/ dependent crimes       1.00      1.00      1.00       753\n",
            "                               cyber terrorism       0.00      0.00      0.00        24\n",
            "hacking  damage to computercomputer system etc       0.56      0.05      0.09       358\n",
            "         online and social media related crime       0.73      0.60      0.66      2361\n",
            "                      online cyber trafficking       0.00      0.00      0.00        29\n",
            "                        online financial fraud       0.78      0.98      0.87     11320\n",
            "                      online gambling  betting       1.00      0.02      0.05        86\n",
            "                                    ransomware       0.00      0.00      0.00        12\n",
            "\n",
            "                                      accuracy                           0.79     17178\n",
            "                                     macro avg       0.56      0.28      0.29     17178\n",
            "                                  weighted avg       0.77      0.79      0.73     17178\n",
            "\n",
            "Accuracy: 0.7858307137035744\n",
            "                                            cleaned_text  \\\n",
            "93103  someone message messenger app using friend nam...   \n",
            "49516  fraud upi fraud phone bank name bank baroda in...   \n",
            "82533  use provide service big transaction scammed mo...   \n",
            "16935  unrgisterd application harrasing demanding mon...   \n",
            "69832                                 fraud amount r inb   \n",
            "\n",
            "           predicted_category         actual_category  \n",
            "93103  online financial fraud  online financial fraud  \n",
            "49516  online financial fraud  online financial fraud  \n",
            "82533  online financial fraud  online financial fraud  \n",
            "16935  online financial fraud   any other cyber crime  \n",
            "69832  online financial fraud  online financial fraud  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results_df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g2PvuqWBbFYH",
        "outputId": "9930e01a-803a-4eb1-f55b-0e08230181af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                            cleaned_text  \\\n",
              "73387  fraud another person call another order produc...   \n",
              "75981  someone hacked facebook account around pm th j...   \n",
              "76542  listing olx selling surgical bed got offer guy...   \n",
              "69130  finance name bharath finance transfer amount r...   \n",
              "33442                  victim reported financial fraud r   \n",
              "\n",
              "                          predicted_category  \\\n",
              "73387                 online financial fraud   \n",
              "75981  online and social media related crime   \n",
              "76542                 online financial fraud   \n",
              "69130                 online financial fraud   \n",
              "33442                 online financial fraud   \n",
              "\n",
              "                             actual_category  \n",
              "73387  online and social media related crime  \n",
              "75981  online and social media related crime  \n",
              "76542                 online financial fraud  \n",
              "69130                 online financial fraud  \n",
              "33442                 online financial fraud  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-35ad0ecc-844f-4645-9441-aaa682af31ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cleaned_text</th>\n",
              "      <th>predicted_category</th>\n",
              "      <th>actual_category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>73387</th>\n",
              "      <td>fraud another person call another order produc...</td>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>online and social media related crime</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75981</th>\n",
              "      <td>someone hacked facebook account around pm th j...</td>\n",
              "      <td>online and social media related crime</td>\n",
              "      <td>online and social media related crime</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76542</th>\n",
              "      <td>listing olx selling surgical bed got offer guy...</td>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>online financial fraud</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>69130</th>\n",
              "      <td>finance name bharath finance transfer amount r...</td>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>online financial fraud</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33442</th>\n",
              "      <td>victim reported financial fraud r</td>\n",
              "      <td>online financial fraud</td>\n",
              "      <td>online financial fraud</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35ad0ecc-844f-4645-9441-aaa682af31ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-35ad0ecc-844f-4645-9441-aaa682af31ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-35ad0ecc-844f-4645-9441-aaa682af31ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-38fb76a1-45b1-415e-9645-2546c09ad388\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-38fb76a1-45b1-415e-9645-2546c09ad388')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-38fb76a1-45b1-415e-9645-2546c09ad388 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"cleaned_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"someone hacked facebook account around pm th jan sent broadcast message contact click link spam link also click week earlier think reason person able hack account location login showing tiruchengodu tamil nadu\",\n          \"victim reported financial fraud r\",\n          \"listing olx selling surgical bed got offer guy said sending r voucher enter via upi pin money deducted account\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"online and social media related crime\",\n          \"online financial fraud\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"actual_category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"online financial fraud\",\n          \"online and social media related crime\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "\n",
        "# Save the Random Forest model\n",
        "joblib.dump(rf_model, 'random_forest_model.pkl')\n",
        "\n",
        "# Save the TF-IDF vectorizer\n",
        "joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1lbTX3bnDuBY",
        "outputId": "0e7bd4d6-c0a0-4703-a9eb-07721522c55e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['tfidf_vectorizer.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "import pandas as pd\n",
        "\n",
        "# Load the saved Random Forest model\n",
        "rf_model = joblib.load('random_forest_model.pkl')\n",
        "\n",
        "# Load the saved TF-IDF vectorizer\n",
        "vectorizer = joblib.load('tfidf_vectorizer.pkl')\n",
        "\n",
        "# Example: Predict on new data\n",
        "new_data = [\"I have ordered  saree and  blouse from rinki sur I paid all amount   after take payment she didnt send me my saree and blouse After  months she refund me  only after that I dont recive my  everyday I told him about my money but she didnt refund and ignore me\"]\n",
        "new_data_vectorized = vectorizer.transform(new_data)\n",
        "predicted_category = rf_model.predict(new_data_vectorized)\n",
        "\n",
        "print(\"Predicted Category:\", predicted_category)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FsNx7wOazNMl",
        "outputId": "928c14c4-f71f-49e4-a41c-fa7a894dc425"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Category: ['online financial fraud']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "category_counts = df['category'].value_counts()\n",
        "\n",
        "print(category_counts)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xp8lzA19IHTm",
        "outputId": "9d77c32b-c447-4947-b605-faa287b0fcce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "category\n",
            "online financial fraud                            56696\n",
            "online and social media related crime             11870\n",
            "any other cyber crime                             10723\n",
            "cyber attack/ dependent crimes                     3608\n",
            "hacking  damage to computercomputer system etc     1681\n",
            "cryptocurrency crime                                477\n",
            "online gambling  betting                            438\n",
            "online cyber trafficking                            180\n",
            "cyber terrorism                                     160\n",
            "ransomware                                           56\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    }
  ]
}